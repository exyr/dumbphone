// Copyright 2020 Working Group Two AS
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package wgtwo.sms.v0;

import "wgtwo/common/v0/phonenumber.proto";

option java_package = "com.wgtwo.api.sms.v0";
option java_outer_classname = "SmsProto";

service SmsService {
  rpc SendTextToSubscriber (SendTextToSubscriberRequest) returns (SendResponse) {}
  rpc SendTextFromSubscriber (SendTextFromSubscriberRequest) returns (SendResponse) {}

  rpc SendBinaryToSubscriber (SendBinaryToSubscriberRequest) returns (SendResponse) {}

  rpc ReceiveText (ReceiveTextRequest) returns (stream Text) {}

  rpc Ack (AckRequest) returns (AckResponse) {}
}

message SendTextToSubscriberRequest {
  string content = 1;

  oneof from_address {
    wgtwo.common.v0.PhoneNumber from_e164 = 2;
    wgtwo.common.v0.TextAddress from_text_address = 3;
  }

  wgtwo.common.v0.PhoneNumber to_subscriber = 4;
}

message SendTextFromSubscriberRequest {
  string content = 1;

  wgtwo.common.v0.PhoneNumber from_subscriber = 2;

  wgtwo.common.v0.PhoneNumber to_e164 = 3;
}


message SendBinaryToSubscriberRequest {
  bytes content = 1;

  oneof fromAddress {
    wgtwo.common.v0.PhoneNumber from_e164 = 2;
    wgtwo.common.v0.TextAddress from_text_address = 3;
  }

  wgtwo.common.v0.PhoneNumber to_subscriber = 4;

  /**
   * The class of the message. See https://en.wikipedia.org/wiki/Data_Coding_Scheme#Message_Classes
   */
  enum MessageClass {
    MESSAGE_CLASS_NOT_SET = 0;
    CLASS0 = 1;
    CLASS1 = 2;
    CLASS2 = 3;
    CLASS3 = 4;
  }

  MessageClass message_class = 5;
}

message SendResponse {
  string request_id = 1;

  enum SendStatus {
    UNKNOWN = 0;
    SEND_OK = 1;
    SEND_REJECT = 2;
    SEND_ERROR = 3;
  }
  SendStatus status = 2;

  string description = 3;
}

message ReceiveTextRequest {
}

message Text {
  string id = 1;

  string content = 2;

  oneof from_address {
    wgtwo.common.v0.PhoneNumber from_e164 = 3;
    wgtwo.common.v0.NationalPhoneNumber from_national_phone_number = 4;
    wgtwo.common.v0.TextAddress from_text_address = 5;
  }

  oneof to_address {
    wgtwo.common.v0.PhoneNumber to_e164 = 6;
    wgtwo.common.v0.NationalPhoneNumber to_national_phone_number = 7;
  }

  enum Direction {
    UNKNOWN = 0;
    FROM_SUBSCRIBER = 1;
    TO_SUBSCRIBER = 2;
  }

  Direction direction = 8;
}

message AckRequest {
  string id = 1;

  enum ReceiveStatus {
    UNKNOWN = 0;

    /**
     * Successfully received.
     */
    RECEIVE_OK = 1;

    /**
     * The receiver does not want to handle the message.
     */
    RECEIVE_REJECT = 2;

    /**
     * The receiver has experienced an error when receiving the message.
     * Error implies the receiver is willing to try again.
     */
    RECEIVE_ERROR = 3;
  }
  ReceiveStatus status = 2;

  string description = 3;
}

message AckResponse {
  enum AckResponseStatus {
    UNKNOWN = 0;
    ACK_ACCEPTED = 1;
    ACK_REJECTED = 2;
  }
  AckResponseStatus ack_response_status = 1;

  string error_message = 2;
}
